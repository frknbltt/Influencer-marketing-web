{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Casper\\\\Desktop\\\\MicroGlobe\\\\Saasland_React\\\\src\\\\contexts\\\\blogContext.js\";\nimport React, { createContext, useContext, useState } from \"react\";\nconst AlignmentContext = createContext({});\n\nconst AlignmentProvider = ({\n  children\n}) => {\n  const [posts, setPosts] = useState([]);\n  const [posts2, setPosts2] = useState([]);\n  const [selectedPost, setSelectedPost] = useState([]);\n\n  const getPosts = () => {\n    const requestOptions = {\n      headers: {\n        \"app-id\": \"60ad503fc816137787ac285c\"\n      }\n    };\n    fetch(\"https://dummyapi.io/data/api/post\", requestOptions).then(response => response.json()).then(responseJson => setPosts(responseJson.data));\n  };\n\n  const getPosts2 = () => {\n    const requestOptions = {\n      headers: {\n        \"app-id\": \"60ad503fc816137787ac285c\"\n      }\n    };\n    fetch(\"https://dummyapi.io/data/api/post\", requestOptions).then(response => response.json()).then(responseJson => setPosts2(responseJson.data));\n  };\n\n  const getPostDetail = postId => {\n    const requestOptions = {\n      headers: {\n        \"app-id\": \"60ad503fc816137787ac285c\"\n      }\n    };\n    fetch(`https://dummyapi.io/data/api/post/${postId}`, requestOptions).then(response => response.json()).then(responseJson => setSelectedPost(responseJson));\n  };\n\n  return React.createElement(AlignmentContext.Provider, {\n    value: {\n      posts,\n      getPosts,\n      posts2,\n      getPosts2,\n      getPostDetail,\n      selectedPost\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, children);\n};\n\nexport default AlignmentProvider;\nexport const useAlignmentContext = () => {\n  const context = useContext(AlignmentContext);\n\n  if (context === undefined) {\n    throw new Error(\"useAlignment must be used within an AlignmentProvider\");\n  }\n\n  return context;\n};","map":{"version":3,"sources":["C:/Users/Casper/Desktop/MicroGlobe/Saasland_React/src/contexts/blogContext.js"],"names":["React","createContext","useContext","useState","AlignmentContext","AlignmentProvider","children","posts","setPosts","posts2","setPosts2","selectedPost","setSelectedPost","getPosts","requestOptions","headers","fetch","then","response","json","responseJson","data","getPosts2","getPostDetail","postId","useAlignmentContext","context","undefined","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AAEA,MAAMC,gBAAgB,GAAGH,aAAa,CAAC,EAAD,CAAtC;;AACA,MAAMI,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMU,QAAQ,GAAG,MAAM;AACrB,UAAMC,cAAc,GAAG;AACrBC,MAAAA,OAAO,EAAE;AACP,kBAAU;AADH;AADY,KAAvB;AAMAC,IAAAA,KAAK,CAAC,mCAAD,EAAsCF,cAAtC,CAAL,CACGG,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,YAAD,IAAkBZ,QAAQ,CAACY,YAAY,CAACC,IAAd,CAFlC;AAGD,GAVD;;AAWA,QAAMC,SAAS,GAAG,MAAM;AACtB,UAAMR,cAAc,GAAG;AACrBC,MAAAA,OAAO,EAAE;AACP,kBAAU;AADH;AADY,KAAvB;AAMAC,IAAAA,KAAK,CAAC,mCAAD,EAAsCF,cAAtC,CAAL,CACGG,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,YAAD,IAAkBV,SAAS,CAACU,YAAY,CAACC,IAAd,CAFnC;AAGD,GAVD;;AAYA,QAAME,aAAa,GAAIC,MAAD,IAAY;AAChC,UAAMV,cAAc,GAAG;AACrBC,MAAAA,OAAO,EAAE;AACP,kBAAU;AADH;AADY,KAAvB;AAMAC,IAAAA,KAAK,CAAE,qCAAoCQ,MAAO,EAA7C,EAAgDV,cAAhD,CAAL,CACGG,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,YAAD,IAAkBR,eAAe,CAACQ,YAAD,CAFzC;AAGD,GAVD;;AAYA,SACE,oBAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,KADK;AAELM,MAAAA,QAFK;AAGLJ,MAAAA,MAHK;AAILa,MAAAA,SAJK;AAKLC,MAAAA,aALK;AAMLZ,MAAAA;AANK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGL,QAVH,CADF;AAcD,CAtDD;;AAwDA,eAAeD,iBAAf;AAEA,OAAO,MAAMoB,mBAAmB,GAAG,MAAM;AACvC,QAAMC,OAAO,GAAGxB,UAAU,CAACE,gBAAD,CAA1B;;AACA,MAAIsB,OAAO,KAAKC,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AACD,SAAOF,OAAP;AACD,CANM","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\nconst AlignmentContext = createContext({});\r\nconst AlignmentProvider = ({ children }) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [posts2, setPosts2] = useState([]);\r\n  const [selectedPost, setSelectedPost] = useState([]);\r\n\r\n  const getPosts = () => {\r\n    const requestOptions = {\r\n      headers: {\r\n        \"app-id\": \"60ad503fc816137787ac285c\",\r\n      },\r\n    };\r\n\r\n    fetch(\"https://dummyapi.io/data/api/post\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((responseJson) => setPosts(responseJson.data));\r\n  };\r\n  const getPosts2 = () => {\r\n    const requestOptions = {\r\n      headers: {\r\n        \"app-id\": \"60ad503fc816137787ac285c\",\r\n      },\r\n    };\r\n\r\n    fetch(\"https://dummyapi.io/data/api/post\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((responseJson) => setPosts2(responseJson.data));\r\n  };\r\n\r\n  const getPostDetail = (postId) => {\r\n    const requestOptions = {\r\n      headers: {\r\n        \"app-id\": \"60ad503fc816137787ac285c\",\r\n      },\r\n    };\r\n\r\n    fetch(`https://dummyapi.io/data/api/post/${postId}`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((responseJson) => setSelectedPost(responseJson));\r\n  };\r\n\r\n  return (\r\n    <AlignmentContext.Provider\r\n      value={{\r\n        posts,\r\n        getPosts,\r\n        posts2,\r\n        getPosts2,\r\n        getPostDetail,\r\n        selectedPost,\r\n      }}\r\n    >\r\n      {children}\r\n    </AlignmentContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AlignmentProvider;\r\n\r\nexport const useAlignmentContext = () => {\r\n  const context = useContext(AlignmentContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAlignment must be used within an AlignmentProvider\");\r\n  }\r\n  return context;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}